library(shiny)
?shiny::fileInput
runApp()
runApp()
write.csv(mtcars, 'mtcars.csv')
runApp()
library(XLConnect)
XLConnect::readTable('abc.xlsx')
XLConnect::readWorksheet(abc.xlsx)
getwd()
XLConnect::readWorksheet('abc.xlsx')
library(WriteXLS)
readWorksheetFromFile('abc.xlsx')
??XLConnect
loadWorkbook('abc.xlsx')
abc.xlsx
loadWorkbook('abc.xlsx')
a=loadWorkbook('abc.xlsx')
a
a[[1]]
?loadWorkbook
a=loadWorkbook('abc.xlsx', create = TRUE)
a
a=loadWorkbook(system.file('abc.xlsx'), package = "XLConnect")
a=loadWorkbook(system.file('abc.xlsx'))
XLConnect::readWorksheet('abc.xlsx')
?XLConnect
loadWorkbook('abc.xlsx')
loadWorkbook('abc.xlsx', create = FALSE)
loadWorkbook('abc.xlsxf', create = FALSE)
loadWorkbook('abc.xlsx', create = FALSE)
abc.xlsx
?XLConnect
demo(package = "XLConnect")
readWorksheet('abc.xlsx')
?WriteXLS
install.packages('MilanoR')
install.packages('gdata')
install.packages('xlsReadWrite')
a
readWorksheet(a)
readWorksheet(a, sheet = 'sheet 1')
gdata::read.xls('abc.xlsx')
a = gdata::read.xls('abc.xlsx')
a
a[1:10,1:10]
runApp()
a = gdata::read.xls('abc.xlsx')
a %>% class
class(a)
head(a)
a[1:3,1]
as.character(a)
a
library(drentools)
a %>% apply(2, as.character) %>% head
a %>% apply(2, as.character) %>% head
runApp()
?xls2csv
runApp()
runApp()
runApp()
runApp()
?shiny::downloadButton
runApp()
?fileInput
runApp()
runApp()
?fileINput
?fileInput
runApp()
runApp()
runApp()
runApp()
runApp()
library(WriteXLS)
runApp()
runApp()
runApp()
runApp()
runApp()
?renderTable
?tableOutput
runApp()
runApp()
runApp()
runApp()
?tableOutput
?tableOutput
runApp()
mtcars %>% glimpse
a = read_xlsx('abc.xlsx')
a %>% glimpse
a %>% summary
a %>% str
colnames(a)
colnames(a) %>% abbreviate()
colnames(a) = colnames(a) %>% abbreviate()
a
summary(a)
str(a)
str(a) %>% as.tibble()
str(a) %>% class
a %>% head()
runApp()
a
a %>% pretty()
?pretty
pretty(1:15)
1:15
dim(mtcars)
dim(mtcars) %>% as.data.frame
dim(mtcars) %>% as.data.frame %>% t()
mtcars
nrow(mtcars)
runApp()
colnames(a)
dim9a
dim(a)
d = dim(a)
colnames(d) = c("Rows", "Columns")
colnames(as.data.frame(d)) = c("Rows", "Columns")
d
runApp()
runApp()
data(africa)
library(Amelia)
africa
data(africa)
africa
is.na(africa)
is.na(africa) %>% sum
data(africa)
a.out <- amelia(x = africa, cs = "country", ts = "year", logs = "gdp_pc")
summary(a.out)
plot(a.out)
a.out
plot(a.out)
africa %>% Amelia::missmap()
a.out
?amelia
predict(a.out, africa)
a.out
a.out$imputations
a=a.out$imputations
a %>% class
a %>% as.tibble()
a[[1]]
a[[1]] %>% Amelia::missmap()
a[[1]] %>% Amelia::missmap()
a
a
a[[1]]
a[[1]][is.na(africa)]
dataEllipse(Duncan$income, Duncan$education, levels=0.1*1:9,
ellipse.label=0.1*1:9, lty=2, fill=TRUE, fill.alpha=0.1)
confidenceEllipse(lm(prestige~income+education, data=Duncan), Scheffe=TRUE)
confidenceEllipse(lm(prestige~income+education, data=Duncan),
L=c("income + education", "income - education"))
wts <- rep(1, nrow(Duncan))
wts[c(6, 16)] <- 0 # delete Minister, Conductor
with(Duncan, {
dataEllipse(income, prestige, levels=0.68)
dataEllipse(income, prestige, levels=0.68, robust=TRUE, plot.points=FALSE, col="green3")
dataEllipse(income, prestige, weights=wts, levels=0.68, plot.points=FALSE, col="brown")
dataEllipse(income, prestige, weights=wts, robust=TRUE, levels=0.68,
plot.points=FALSE, col="blue")
})
with(Prestige, dataEllipse(income, education, type, id.n=2, pch=15:17,
labels=rownames(Prestige), xlim=c(0, 25000), center.pch="+",
group.labels=c("Blue Collar", "Professional", "White Collar"),
ylim=c(5, 20), level=.95, fill=TRUE, fill.alpha=0.1))
library(car)
dataEllipse(Duncan$income, Duncan$education, levels=0.1*1:9,
ellipse.label=0.1*1:9, lty=2, fill=TRUE, fill.alpha=0.1)
confidenceEllipse(lm(prestige~income+education, data=Duncan), Scheffe=TRUE)
confidenceEllipse(lm(prestige~income+education, data=Duncan),
L=c("income + education", "income - education"))
wts <- rep(1, nrow(Duncan))
wts[c(6, 16)] <- 0 # delete Minister, Conductor
with(Duncan, {
dataEllipse(income, prestige, levels=0.68)
dataEllipse(income, prestige, levels=0.68, robust=TRUE, plot.points=FALSE, col="green3")
dataEllipse(income, prestige, weights=wts, levels=0.68, plot.points=FALSE, col="brown")
dataEllipse(income, prestige, weights=wts, robust=TRUE, levels=0.68,
plot.points=FALSE, col="blue")
})
with(Prestige, dataEllipse(income, education, type, id.n=2, pch=15:17,
labels=rownames(Prestige), xlim=c(0, 25000), center.pch="+",
group.labels=c("Blue Collar", "Professional", "White Collar"),
ylim=c(5, 20), level=.95, fill=TRUE, fill.alpha=0.1))
runApp()
runApp()
